--- a/minidlna.c	2022-08-30 06:42:54.000000000 +0000
+++ b/minidlna.c	2022-12-14 16:26:55.113392628 +0000
@@ -204,7 +204,6 @@
 static void
 sigusr1(int sig)
 {
-	signal(sig, sigusr1);
 	DPRINTF(E_WARN, L_GENERAL, "received signal %d, clear cache\n", sig);
 
 	memset(&clients, '\0', sizeof(clients));
@@ -213,11 +212,7 @@
 static void
 sighup(int sig)
 {
-	signal(sig, sighup);
-	DPRINTF(E_WARN, L_GENERAL, "received signal %d, reloading\n", sig);
-
-	reload_ifaces(1);
-	log_reopen();
+	SETFLAG(RESCAN_MASK);
 }
 
 /* record the startup time */
@@ -411,12 +406,18 @@
 	}
 	if (ret || GETFLAG(RESCAN_MASK))
 	{
+		sigset_t mask;
+		sigemptyset(&mask);
+		sigaddset(&mask, SIGHUP);
+		pthread_sigmask(SIG_BLOCK, &mask, NULL);
 #if USE_FORK
 		sqlite3_close(db);
 		*scanner_pid = fork();
 		open_db(&db);
 		if (*scanner_pid == 0) /* child (scanner) process */
 		{
+			signal(SIGHUP, SIG_IGN);
+			
 			start_scanner();
 			sqlite3_close(db);
 			log_close();
@@ -427,12 +428,16 @@
 		else if (*scanner_pid < 0)
 		{
 			start_scanner();
+			CLEARFLAG(SCANNING_MASK);
+			CLEARFLAG(RESCAN_MASK);
 		}
 		else
 			SETFLAG(SCANNING_MASK);
 #else
 		start_scanner();
+		CLEARFLAG(RESCAN_MASK);
 #endif
+		pthread_sigmask(SIG_UNBLOCK, &mask, NULL);
 	}
 }
 
@@ -1045,11 +1050,13 @@
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGINT");
 	if (signal(SIGPIPE, SIG_IGN) == SIG_ERR)
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGPIPE");
-	if (signal(SIGHUP, &sighup) == SIG_ERR)
+	sa.sa_handler = sighup;
+	if (sigaction(SIGHUP, &sa, NULL))
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGHUP");
 	if (signal(SIGUSR2, SIG_IGN) == SIG_ERR)
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGUSR2");
-	signal(SIGUSR1, &sigusr1);
+	sa.sa_handler = sigusr1;
+	sigaction(SIGUSR1, &sa, NULL);
 	sa.sa_handler = process_handle_child_termination;
 	if (sigaction(SIGCHLD, &sa, NULL))
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGCHLD");
@@ -1273,6 +1280,7 @@
 			if (kill(scanner_pid, 0) != 0) {
 				DPRINTF(E_INFO, L_GENERAL, "Scanner exited\n");
 				CLEARFLAG(SCANNING_MASK);
+				CLEARFLAG(RESCAN_MASK);
 				if (_get_dbtime() != lastdbtime)
 					updateID++;
 #ifdef HAVE_WATCH
@@ -1283,6 +1291,12 @@
 				tv.tv_sec = 1;
 		}
 
+		if (GETFLAG(RESCAN_MASK) &&
+				!GETFLAG(SCANNING_MASK))
+		{
+			check_db(db, -1, &scanner_pid);
+		}
+
 		event_module.process(&tv);
 		if (quitting)
 			goto shutdown;
@@ -1328,7 +1342,7 @@
 
 shutdown:
 	/* kill the scanner */
-	if (GETFLAG(SCANNING_MASK) && scanner_pid)
+	if (GETFLAG(SCANNING_MASK))
 		kill(scanner_pid, SIGKILL);
 
 	/* close out open sockets */
--- a/monitor.c	2022-08-30 06:42:54.000000000 +0000
+++ b/monitor.c	2022-12-14 16:31:14.606604832 +0000
@@ -267,7 +267,11 @@
 
 static bool
 check_notsparse(const char *path)
-#if HAVE_DECL_SEEK_HOLE
+#ifdef __sun
+{
+	return true;
+}
+#elif HAVE_DECL_SEEK_HOLE
 {
 	int fd;
 	bool rv;
--- a/process.c	2022-08-30 06:42:54.000000000 +0000
+++ b/process.c	2022-12-14 16:28:46.859212590 +0000
@@ -94,17 +94,27 @@
 		return -1;
 	}
 
+	sigset_t mask;
+	sigemptyset(&mask);
+	sigaddset(&mask, SIGHUP);
+	pthread_sigmask(SIG_BLOCK, &mask, NULL);
+
 	pid_t pid = fork();
 	if (pid > 0)
 	{
+		pthread_sigmask(SIG_UNBLOCK, &mask, NULL);
+
 		if (client)
 			client->connections++;
 		add_process_info(pid, client);
 		number_of_children++;
-	} else if (pid == 0)
+	} else if (pid == 0) {
+		signal(SIGHUP, SIG_IGN);
 		event_module.fini();
-	else
+	} else {
+		pthread_sigmask(SIG_UNBLOCK, &mask, NULL);
 		DPRINTF(E_FATAL, L_GENERAL, "Fork() failed: %s\n", strerror(errno));
+	}
 
 	return pid;
 }
