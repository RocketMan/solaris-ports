--- a/upnphttp.c	2022-08-30 06:42:54.000000000 +0000
+++ b/upnphttp.c	2022-12-14 16:36:34.306308174 +0000
@@ -875,6 +875,8 @@
 		}
 	}
 
+	DPRINTF(E_DEBUG, L_HTTP, "HTTP REQUEST: %.*s\n", h->req_buflen, h->req_buf);
+
 	ParseHttpHeaders(h);
 
 	/* see if we need to wait for remaining data */
@@ -913,7 +915,6 @@
 		h->state = 100;
 	}
 
-	DPRINTF(E_DEBUG, L_HTTP, "HTTP REQUEST: %.*s\n", h->req_buflen, h->req_buf);
 	if(h->req_Host && h->req_HostLen > 0) {
 		const char *port = memchr(h->req_Host, ':', h->req_HostLen);
 		size_t ip_sz = port ? (port - h->req_Host) : h->req_HostLen;
@@ -2055,20 +2056,21 @@
 
 	if( h->reqflags & FLAG_RANGE )
 	{
-		if( !h->req_RangeEnd || h->req_RangeEnd == size )
+		if( h->req_RangeStart < 0 ||
+			(h->req_RangeEnd && (h->req_RangeStart > h->req_RangeEnd)) )
 		{
-			h->req_RangeEnd = size - 1;
-		}
-		if( (h->req_RangeStart > h->req_RangeEnd) || (h->req_RangeStart < 0) )
-		{
-			DPRINTF(E_WARN, L_HTTP, "Specified range was invalid!\n");
+			DPRINTF(E_DEBUG, L_HTTP, "Specified range was invalid!\n");
 			Send400(h);
 			close(sendfh);
 			goto error;
 		}
-		if( h->req_RangeEnd >= size )
+		if( !h->req_RangeEnd || h->req_RangeEnd >= size )
+		{
+			h->req_RangeEnd = size - 1;
+		}
+		if( h->req_RangeStart > h->req_RangeEnd )
 		{
-			DPRINTF(E_WARN, L_HTTP, "Specified range was outside file boundaries!\n");
+			DPRINTF(E_DEBUG, L_HTTP, "Specified range was outside file boundaries!\n");
 			Send416(h);
 			close(sendfh);
 			goto error;
