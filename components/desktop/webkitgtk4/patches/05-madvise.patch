--- a/Source/bmalloc/bmalloc/BPlatform.h	2020-05-06 15:16:33.000000000 +0000
+++ b/Source/bmalloc/bmalloc/BPlatform.h	2020-07-16 11:14:42.608308291 +0000
@@ -52,6 +52,10 @@
 #define BOS_FREEBSD 1
 #endif
 
+#if defined(sun) || defined(__sun)
+#define BOS_SOLARIS 1
+#endif
+
 #if defined(WIN32) || defined(_WIN32)
 #define BOS_WINDOWS 1
 #endif
--- a/Source/bmalloc/bmalloc/VMAllocate.h	2020-07-15 19:21:07.536004242 +0000
+++ b/Source/bmalloc/bmalloc/VMAllocate.h	2020-07-16 11:06:25.330777260 +0000
@@ -46,7 +46,7 @@
 #define BMALLOC_VM_TAG VM_TAG_FOR_TCMALLOC_MEMORY
 #endif
 
-#if BOS(LINUX)
+#if BOS(LINUX) || BOS(SOLARIS)
 #define BMALLOC_NORESERVE MAP_NORESERVE
 #else
 #define BMALLOC_NORESERVE 0
@@ -203,6 +203,8 @@
     SYSCALL(madvise(p, vmSize, MADV_FREE_REUSABLE));
 #elif BOS(FREEBSD)
     SYSCALL(madvise(p, vmSize, MADV_FREE));
+#elif BOS(SOLARIS)
+    SYSCALL(posix_madvise(p, vmSize, POSIX_MADV_DONTNEED));
 #else
     SYSCALL(madvise(p, vmSize, MADV_DONTNEED));
 #if BOS(LINUX)
@@ -220,6 +222,8 @@
     // For the Darwin platform, we don't need to call madvise(..., MADV_FREE_REUSE)
     // to commit physical memory to back a range of allocated virtual memory.
     // Instead the kernel will commit pages as they are touched.
+#elif BOS(SOLARIS)
+    SYSCALL(posix_madvise(p, vmSize, POSIX_MADV_NORMAL));
 #else
     SYSCALL(madvise(p, vmSize, MADV_NORMAL));
 #if BOS(LINUX)
--- a/Source/WTF/wtf/posix/OSAllocatorPOSIX.cpp	2020-11-06 11:48:12.000000000 +0000
+++ b/Source/WTF/wtf/posix/OSAllocatorPOSIX.cpp	2021-06-30 17:58:37.946388576 +0000
@@ -115,7 +115,7 @@
 
 void* OSAllocator::tryReserveUncommitted(size_t bytes, Usage usage, bool writable, bool executable, bool jitCageEnabled, bool includesGuardPages)
 {
-#if OS(LINUX)
+#if OS(LINUX) || OS(SOLARIS)
     UNUSED_PARAM(usage);
     UNUSED_PARAM(jitCageEnabled);
     UNUSED_PARAM(includesGuardPages);
@@ -129,7 +129,11 @@
     if (result == MAP_FAILED)
         result = nullptr;
     if (result)
+#if OS(SOLARIS)
+        while (posix_madvise(result, bytes, POSIX_MADV_DONTNEED) == EAGAIN) { }
+#else
         while (madvise(result, bytes, MADV_DONTNEED) == -1 && errno == EAGAIN) { }
+#endif
 #else
     void* result = tryReserveAndCommit(bytes, usage, writable, executable, jitCageEnabled, includesGuardPages);
 #if HAVE(MADV_FREE_REUSE)
@@ -232,10 +236,14 @@
 
 void OSAllocator::commit(void* address, size_t bytes, bool writable, bool executable)
 {
-#if OS(LINUX)
+#if OS(LINUX) || OS(SOLARIS)
     UNUSED_PARAM(writable);
     UNUSED_PARAM(executable);
+#if OS(SOLARIS)
+    while (posix_madvise(address, bytes, POSIX_MADV_WILLNEED) == EAGAIN) { }
+#else
     while (madvise(address, bytes, MADV_WILLNEED) == -1 && errno == EAGAIN) { }
+#endif
 #elif HAVE(MADV_FREE_REUSE)
     UNUSED_PARAM(writable);
     UNUSED_PARAM(executable);
@@ -253,6 +261,8 @@
 {
 #if OS(LINUX)
     while (madvise(address, bytes, MADV_DONTNEED) == -1 && errno == EAGAIN) { }
+#elif OS(SOLARIS)
+    while (posix_madvise(address, bytes, POSIX_MADV_DONTNEED) == EAGAIN) { }
 #elif HAVE(MADV_FREE_REUSE)
     while (madvise(address, bytes, MADV_FREE_REUSABLE) == -1 && errno == EAGAIN) { }
 #elif HAVE(MADV_FREE)
@@ -267,7 +277,9 @@
 
 void OSAllocator::hintMemoryNotNeededSoon(void* address, size_t bytes)
 {
-#if HAVE(MADV_DONTNEED)
+#if OS(SOLARIS)
+    while (posix_madvise(address, bytes, POSIX_MADV_DONTNEED) == EAGAIN) { }
+#elif HAVE(MADV_DONTNEED)
     while (madvise(address, bytes, MADV_DONTNEED) == -1 && errno == EAGAIN) { }
 #else
     UNUSED_PARAM(address);
