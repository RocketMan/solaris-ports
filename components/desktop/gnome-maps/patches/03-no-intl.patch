--- gnome-maps-40.5/src/utils.js.~1~	2021-09-18 08:18:35.000000000 +0000
+++ gnome-maps-40.5/src/utils.js	2021-09-27 15:48:45.034193931 +0000
@@ -42,11 +42,6 @@
 // Matches all unicode stand-alone accent characters
 const ACCENTS_REGEX = /[\u0300-\u036F]/g;
 
-const _integerFormat = new Intl.NumberFormat([], { maximumFractionDigits: 0 });
-const _integerTwoDigitFormat =
-    new Intl.NumberFormat([], { minimumIntegerDigits: 2,
-                                maximumFractionDigits: 0 });
-
 let debugInit = false;
 let measurementSystem = null;
 
@@ -313,23 +308,6 @@
     }
 }
 
-/**
- * Return a formatted integer number with no
- * fraction, using locale-specific numerals
- */
-function formatLocaleInteger(n) {
-    return _integerFormat.format(n);
-}
-
-/**
- * Return a formatted integer number with no
- * fraction, using locale-specific numerals using at least two digits
- * with possible leading 0, suitable for time rendering.
- */
-function formatLocaleIntegerMinimumTwoDigits(n) {
-    return _integerTwoDigitFormat.format(n);
-}
-
 function prettyTime(time) {
     let seconds = Math.floor(time / 1000);
     let minutes = Math.floor(seconds / 60);
@@ -337,35 +315,14 @@
     let hours = Math.floor(minutes / 60);
     minutes = minutes % 60;
 
-    let secondsStr = formatLocaleInteger(seconds);
-    let minutesStr = formatLocaleInteger(minutes);
-    let hoursStr = formatLocaleInteger(hours);
-
-    if (hours > 0 && minutes === 0) {
-        /* Translators: this is a duration with only hours, using
-         * an abbreviation for hours, corresponding to 'h' in English
-         */
-        return _("%s h").format(hoursStr);
-    } else if (hours > 0) {
-        /* Translators: this is a duration with hours and minutes parts
-         * using abbreviations for hours and minutes, corresponding to 'h'
-         * and 'min' in English. The minutes has appropriate plural variations
-         */
-        return ngettext("%s h %s min", "%s h %s min",
-                        minutes).format(hoursStr, minutesStr);
-    } else if (minutes > 0) {
-        /* Translators: this is a duration with minutes part
-         * using abbreviation for minutes, corresponding to 'min' in English
-         * with appropriate plural variations
-         */
-        return ngettext("%s min", "%s min", minutes).format(minutesStr);
-    } else {
-        /* Translators: this is a duration of less than one minute
-         * with seconds using an abbreviation for seconds, corresponding to
-         * 's' in English with appropriate plural forms
-         */
-        return ngettext("%s s", "%s s", seconds).format(secondsStr);
-    }
+    let labelledTime = "";
+    if (hours > 0)
+        labelledTime += _("%f h").format(hours)+' ';
+    if (minutes > 0)
+        labelledTime += _("%f min").format(minutes);
+    if (hours === 0 && minutes === 0)
+        labelledTime = _("%f s").format(seconds);
+    return labelledTime;
 }
 
 function prettyDistance(distance, noRound) {
--- gnome-maps-3.38.2/src/transitOptionsPanel.js	2020-11-21 13:24:04.000000000 +0000
+++ gnome-maps-3.38.2/src/transitOptionsPanel.js	2020-12-04 18:50:10.260893609 +0000
@@ -36,10 +36,6 @@
 let _desktopSettings = new Gio.Settings({ schema_id: 'org.gnome.desktop.interface' });
 let clockFormat = _desktopSettings.get_string(CLOCK_FORMAT_KEY);
 
-const _timeFormat = new Intl.DateTimeFormat([], { hour:     '2-digit',
-                                                  minute:   '2-digit',
-                                                  hour12:   clockFormat === '12h' });
-
 var TransitOptionsPanel = GObject.registerClass({
     Template: 'resource:///org/gnome/Maps/ui/transit-options-panel.ui',
     InternalChildren: ['transitTimeOptionsComboBox',
@@ -103,7 +99,7 @@
             this._transitDateButton.visible = true;
 
             if (!this._timeSelected)
-                this._transitTimeEntry.text = _timeFormat.format(new Date());
+                this._updateTransitTimeEntry(GLib.DateTime.new_now_local());
 
             if (!this._dateSelected)
                 this._updateTransitDateButton(GLib.DateTime.new_now_local());
@@ -116,6 +112,13 @@
         }
     }
 
+    _updateTransitTimeEntry(time) {
+        if (clockFormat === '24h')
+            this._transitTimeEntry.text = time.format('%R');
+        else
+            this._transitTimeEntry.text = time.format('%r');
+    }
+
     _onTransitTimeEntryActivated() {
         let timeString = this._transitTimeEntry.text;
 
