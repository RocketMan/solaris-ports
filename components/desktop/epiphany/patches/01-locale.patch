Solaris 11.3 does not have newlocale/uselocale, so we revert to the
old way of doing things using setlocale.


diff --git a/lib/contrib/gnome-languages.c b/lib/contrib/gnome-languages.c
index 75ba956c2..c0fb5775d 100644
--- a/lib/contrib/gnome-languages.c
+++ b/lib/contrib/gnome-languages.c
@@ -288,15 +288,15 @@ gnome_normalize_locale (const char *locale)
 static gboolean
 language_name_is_valid (const char *language_name)
 {
-        locale_t locale;
+        gboolean  is_valid;
+        int lc_type_id = LC_MESSAGES;
+        g_autofree char *old_locale = NULL;
 
-        locale = newlocale (LC_MESSAGES_MASK, language_name, (locale_t) 0);
-        if (locale != (locale_t) 0) {
-                freelocale (locale);
-                return TRUE;
-        }
+        old_locale = g_strdup (setlocale (lc_type_id, NULL));
+        is_valid = setlocale (lc_type_id, language_name) != NULL;
+        setlocale (lc_type_id, old_locale);
 
-        return FALSE;
+        return is_valid;
 }
 
 static void
@@ -304,15 +304,13 @@ language_name_get_codeset_details (const char  *language_name,
                                    char       **pcodeset,
                                    gboolean    *is_utf8)
 {
-        locale_t locale;
-        locale_t old_locale;
-        const char *codeset = NULL;
+        g_autofree char *old_locale = NULL;
+        g_autofree char *codeset = NULL;
 
-        locale = newlocale (LC_CTYPE_MASK, language_name, (locale_t) 0);
-        if (locale == (locale_t) 0)
-                return;
+        old_locale = g_strdup (setlocale (LC_CTYPE, NULL));
 
-        old_locale = uselocale (locale);
+        if (setlocale (LC_CTYPE, language_name) == NULL)
+                return;
 
         codeset = nl_langinfo (CODESET);
 
@@ -321,13 +319,12 @@ language_name_get_codeset_details (const char  *language_name,
         }
 
         if (is_utf8 != NULL) {
-                g_autofree char *normalized_codeset = normalize_codeset (codeset);
+                codeset = normalize_codeset (codeset);
 
-                *is_utf8 = strcmp (normalized_codeset, "UTF-8") == 0;
+                *is_utf8 = strcmp (codeset, "UTF-8") == 0;
         }
 
-        uselocale (old_locale);
-        freelocale (locale);
+        setlocale (LC_CTYPE, old_locale);
 }
 
 /**
@@ -705,14 +702,11 @@ get_translated_language (const char *code,
         name = NULL;
         if (language != NULL) {
                 const char *translated_name;
-                locale_t loc;
-                locale_t old_locale;
+                g_autofree char *old_locale = NULL;
 
                 if (locale != NULL) {
-                        loc = newlocale (LC_MESSAGES_MASK, locale, (locale_t) 0);
-                        if (loc == (locale_t) 0)
-                                return NULL;
-                        old_locale = uselocale (loc);
+                        old_locale = g_strdup (setlocale (LC_MESSAGES, NULL));
+                        setlocale (LC_MESSAGES, locale);
                 }
 
                 if (is_fallback_language (code)) {
@@ -725,8 +719,7 @@ get_translated_language (const char *code,
                 }
 
                 if (locale != NULL) {
-                        uselocale (old_locale);
-                        freelocale (loc);
+                        setlocale (LC_MESSAGES, old_locale);
                 }
         }
 
@@ -763,15 +756,12 @@ get_translated_territory (const char *code,
         name = NULL;
         if (territory != NULL) {
                 const char *translated_territory;
-                locale_t loc;
-                locale_t old_locale = NULL;
+                g_autofree char *old_locale = NULL;
                 g_autofree char *tmp = NULL;
 
                 if (locale != NULL) {
-                        loc = newlocale (LC_MESSAGES_MASK, locale, (locale_t) 0);
-                        if (loc == (locale_t) 0)
-                                return NULL;
-                        old_locale = uselocale (loc);
+                        old_locale = g_strdup (setlocale (LC_MESSAGES, NULL));
+                        setlocale (LC_MESSAGES, locale);
                 }
 
                 translated_territory = dgettext ("iso_3166", territory);
@@ -779,8 +769,7 @@ get_translated_territory (const char *code,
                 name = capitalize_utf8_string (tmp);
 
                 if (locale != NULL) {
-                        uselocale (old_locale);
-                        freelocale (loc);
+                        setlocale (LC_MESSAGES, old_locale);
                 }
         }
 
--- epiphany-41.rc/lib/ephy-sync-utils.c.~1~	2021-09-11 15:05:41.553468380 +0000
+++ epiphany-41.rc/lib/ephy-sync-utils.c	2021-09-11 15:06:09.545662053 +0000
@@ -30,7 +30,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <webkit2/webkit2.h>
-#if defined(__linux__)
+#if defined(__linux__) || defined(__sun)
 #include <sys/random.h>
 #elif defined(__FreeBSD__) || defined(__OpenBSD__)
 #include <unistd.h>
